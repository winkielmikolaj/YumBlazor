@page "/cart"
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IShoppingCartRepository _shoppingCartRepository
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject IJSRuntime _JS
@inject NavigationManager _NavigationManager
@attribute [Authorize]

<PageTitle>Home</PageTitle>

@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="Images/loading.gif" alt="loading"/>
    </div>
}
else
{
    <div class="row w-100">
        <div class="col-lg-6 col-12">
            <div class="container p-4 m-2">
                <h4 class="text-center text-success display-6">
                    Cart Summary
                </h4>

                @foreach (var carItem in ShoppingCarts)
                {
                    <div class="d-flex p-2 m-2">
                        <div class="card flex-row w-100">
                            <img class="card-img-left" style="width: 120px;" src="@carItem.Product.ImageUrl">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h4 class="">
                                        @carItem.Product.Name
                                    </h4>
                                    <h4>
                                        @carItem.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                    </h4>
                                </div>
                                <div class="flex-fill">
                                    <h4 class="text-danger">
                                        @((carItem.Product.Price * carItem.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                                    </h4>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex justify-content-between g-0">
									<span @onclick="() =>UpdateCartItem(carItem.ProductId, -1)">
										<i class="bi bi-dash-circle-fill btn text-secondary"></i>
									</span>
                                        <span class="ml-1 me-1">
										<b class="lead">@carItem.Count</b>
									</span>
                                        <span @onclick="() =>UpdateCartItem(carItem.ProductId, 1)">
										<i class="bi bi-plus-circle-fill btn text-secondary"></i>
									</span>
                                    </div>
                                    <button class="btn btn-danger"
                                            @onclick="() => UpdateCartItem(carItem.ProductId, -1000000)">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-lg-6 col-12 p-4">
            <div class="card">
                <div class="card-header text-success text-center display-6">
                    Pickup Details
                </div>
                <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div class="card-body">


                        <div class="form-group">
                            <label>Name</label>
                            <InputText @bind-Value="OrderHeader.Name" type="text" class="form-control"/>
                            <ValidationMessage For="@(() => OrderHeader.Name)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <InputText @bind-Value="OrderHeader.Email" type="text" class="form-control"/>
                            <ValidationMessage For="@(() => OrderHeader.Email)"></ValidationMessage>
                        </div>
                        <div class="form-group">
                            <label>Phone</label>
                            <InputText @bind-Value="OrderHeader.PhoneNumber" type="text" class="form-control"/>
                            <ValidationMessage For="@(() => OrderHeader.PhoneNumber)"></ValidationMessage>
                        </div>


                        <div class="card mt-4 bg-light">
                            <div class="card-body">
                                <h4>
                                    Grand
                                    Total: @OrderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                </h4>
                                <h4>
                                    No. of Items: @TotalItems
                                </h4>
                            </div>

                        </div>
                    </div>

                    <button type="submit" class="btn btn-success m-4">
                        Looks Good? Place Order!
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
}

@code
{
    private IEnumerable<ShoppingCart> ShoppingCarts { get; set; } = new List<ShoppingCart>();
    private bool IsProcessing { get; set; } = true;

    [SupplyParameterFromForm] public OrderHeader OrderHeader { get; set; } = new OrderHeader();

    private int TotalItems { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCart()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        ShoppingCarts = await _shoppingCartRepository.GetAllAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
    }

    private async Task UpdateCartItem(int productId, int updateBy)
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        //add item to cart
        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        var result = await
            _shoppingCartRepository.UpdateCartAsync(userId, productId, updateBy);
        //_SharedStateService.TotalCartCount = await _shoppingCartRepository.GetTotalCartCartCountAsync(userId);
        await LoadCart();
    }

    private async Task ProcessOrderCreation()
    {
    }
}
