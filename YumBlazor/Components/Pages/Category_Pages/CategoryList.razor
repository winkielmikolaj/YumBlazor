@page "/category"
@inject ICategoryRepository _categoryRepository;
@inject IJSRuntime _JS

<YumBlazor.Components.Shared.BsModel OnModelConfirmation="ConfirmDeleteClick"></YumBlazor.Components.Shared.BsModel>

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="Images/loading.gif" alt="loading"/>
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="category/create" class="btn btn-lg btn-secondary" style="width: 250px">
                        <i class="bi bi-plus-square"></i> Add New Category
                    </a>
                </div>
            </div>
        </div>
        @if (Categories.Any())
        {
            <table class="table table-bordered table-striped">
                <thead>
                <tr>
                    <th>Name</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var obj in Categories)
                {
                    <tr>
                        <td>
                            @obj.Name
                        </td>
                        <td>
                            <a href="@($"category/update/{obj.Id}")" class="btn btn-primary">
                                <i class="bi bi-pencil-square"></i>Edit
                            </a>
                            <button class="btn btn-danger" @onclick="() => HandleDelete(obj.Id)">
                                <i class="bi bi-trash"></i>Delete
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>
}

@code {
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    
    private bool IsProcessing { get; set; }
    private int DeleteCategoryId { get; set; } = 0;


    protected override async Task OnInitializedAsync()
    {
        IsProcessing = true;
        await Task.Delay(500);
        await LoadCategories();
        IsProcessing = false;
    }

    private async Task LoadCategories()
    {
        Categories = await _categoryRepository.GetAllAsync();
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteClick(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteCategoryId != 0)
        {
            var result = await _categoryRepository.DeleteAsync(DeleteCategoryId);
            if (result)
            {
                await _JS.InvokeVoidAsync("HideConfirmationModal");
                _JS?.ToastrSuccess("Category Deleted Successfully");
            }
            else
            {
                await _JS.InvokeVoidAsync("HideConfirmationModal");
                _JS?.ToastrError("Error Encountered while deleting");
            }

            await LoadCategories();

        }

        DeleteCategoryId = 0;
        IsProcessing = false;
    }
}